{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pdf-view",
  "type": "registry:ui",
  "title": "PDF View",
  "description": "PDFV Viewer component",
  "dependencies": [
    "pdfjs-dist"
  ],
  "files": [
    {
      "path": "src/registry/pdf-view/pdf-view.tsx",
      "content": "'use client'\n\nimport {\n  DocumentActionsContext,\n  DocumentStateContext,\n} from '@/registry/pdf-view/pdf-view-document-provider'\nimport { useContext } from 'react'\n\nfunction PDFView() {\n  const documentActions = useContext(DocumentActionsContext)\n  const documentState = useContext(DocumentStateContext)\n  return (\n    <div className={'flex flex-col gap-2'}>\n      <button\n        onClick={async () => {\n          await documentActions.loadDocument('http://localhost:3000/sample.pdf')\n        }}>\n        Load Document\n      </button>\n\n      <button\n        onClick={() => {\n          documentActions.loadPage(1)\n        }}>\n        Load Page 1\n      </button>\n      <button\n        onClick={() => {\n          documentActions.loadPage(10)\n        }}>\n        Load Page 10\n      </button>\n      {documentState.pages[1]?.blob && (\n        <img src={URL.createObjectURL(documentState.pages[1].blob)} />\n      )}\n      {documentState.pages[10]?.blob && (\n        <img src={URL.createObjectURL(documentState.pages[10].blob)} />\n      )}\n    </div>\n  )\n}\n\nexport default PDFView\nexport { PDFView }\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/pdf-view/pdf-view-document-provider.tsx",
      "content": "'use client'\n\nimport * as pdfjs from 'pdfjs-dist'\nimport type {\n  DocumentInitParameters,\n  TypedArray,\n} from 'pdfjs-dist/types/src/display/api'\nimport * as React from 'react'\n\npdfjs.GlobalWorkerOptions.workerSrc = new URL(\n  'pdfjs-dist/build/pdf.worker.min.mjs',\n  import.meta.url,\n).toString()\n\ninterface DocumentState {\n  status: 'loading' | 'success' | 'error'\n  pageCount: number\n  pages: Record<\n    number,\n    {\n      status: 'loading' | 'success' | 'error'\n      blob: Blob | null\n    }\n  >\n}\nconst DocumentStateContext = React.createContext<DocumentState>(\n  {} as DocumentState,\n)\n\ninterface DocumentActions {\n  loadDocument: (\n    src: string | URL | TypedArray | ArrayBuffer | DocumentInitParameters,\n  ) => Promise<void>\n  loadPage: (pageNumber: number, scale?: number) => Promise<void>\n}\nconst DocumentActionsContext = React.createContext<DocumentActions>(\n  {} as DocumentActions,\n)\n\nfunction PDFDocumentProvider(props: {\n  children: React.ReactNode | React.ReactNode[]\n}) {\n  const [state, setState] = React.useState({\n    status: 'loading' as DocumentState['status'],\n    pageCount: 0 as DocumentState['pageCount'],\n    pages: {} as DocumentState['pages'],\n  })\n  const documentProxy = React.useRef<pdfjs.PDFDocumentProxy>(null)\n\n  const loadDocument = React.useCallback(\n    async (\n      src: string | URL | TypedArray | ArrayBuffer | DocumentInitParameters,\n    ) => {\n      setState((state) => ({\n        ...state,\n        status: 'loading',\n      }))\n\n      try {\n        const pdf = await pdfjs.getDocument(src).promise\n        documentProxy.current = pdf\n        setState((state) => ({\n          ...state,\n          status: 'success',\n          pageCount: pdf.numPages,\n        }))\n      } catch (e) {\n        setState((state) => ({\n          ...state,\n          status: 'error',\n        }))\n        throw new Error('Failed to load document', {\n          cause: e,\n        })\n      }\n    },\n    [],\n  )\n\n  const loadPage = React.useCallback(\n    async (pageNumber: number, scale: number = 1) => {\n      if (documentProxy.current === null)\n        throw new Error('Document is not loaded')\n\n      const pdf = documentProxy.current\n\n      setState((state) => ({\n        ...state,\n        pages: {\n          ...state.pages,\n          [pageNumber]: {\n            status: 'loading',\n            blob: null,\n          },\n        },\n      }))\n\n      try {\n        const page = await pdf.getPage(pageNumber)\n        const viewport = page.getViewport({ scale })\n        const outputScale = window.devicePixelRatio || 1\n\n        const canvas = document.createElement('canvas')\n        const context = canvas.getContext('2d')!\n        canvas.width = Math.floor(viewport.width * outputScale)\n        canvas.height = Math.floor(viewport.height * outputScale)\n        canvas.style.width = Math.floor(viewport.width) + 'px'\n        canvas.style.height = Math.floor(viewport.height) + 'px'\n\n        const transform =\n          outputScale !== 1 ? [outputScale, 0, 0, outputScale, 0, 0] : undefined\n        const renderContext = {\n          canvas,\n          canvasContext: context,\n          transform,\n          viewport,\n        }\n\n        await page.render(renderContext).promise\n        const blob = await new Promise<Blob>((resolve, reject) => {\n          canvas.toBlob((blob) => {\n            if (!blob) {\n              reject(new Error('Failed to convert canvas to blob'))\n              return\n            }\n\n            resolve(blob)\n          })\n        })\n\n        setState((state) => ({\n          ...state,\n          pages: {\n            ...state.pages,\n            [pageNumber]: {\n              status: 'success',\n              blob,\n            },\n          },\n          pageCount: pdf.numPages,\n        }))\n      } catch (e) {\n        setState((state) => ({\n          ...state,\n          pages: {\n            ...state.pages,\n            [pageNumber]: {\n              status: 'error',\n              blob: null,\n            },\n          },\n        }))\n        throw new Error('Failed to load page', {\n          cause: e,\n        })\n      }\n    },\n    [],\n  )\n\n  return (\n    <DocumentActionsContext.Provider\n      value={{\n        loadDocument,\n        loadPage,\n      }}>\n      <DocumentStateContext.Provider value={state}>\n        {props.children}\n      </DocumentStateContext.Provider>\n    </DocumentActionsContext.Provider>\n  )\n}\n\nexport default PDFDocumentProvider\nexport { DocumentActionsContext, DocumentStateContext, PDFDocumentProvider }\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/pdf-view/pdf-view-nextcsr.tsx",
      "content": "'use client'\n\nimport dynamic from 'next/dynamic'\n\nconst PDFDocumentProvider = dynamic(\n  () => import('@/registry/pdf-view/pdf-view-document-provider'),\n  {\n    ssr: false,\n  },\n)\n\nconst PDFView = dynamic(() => import('@/registry/pdf-view/pdf-view'), {\n  ssr: false,\n})\n\nexport { PDFDocumentProvider, PDFView }\n",
      "type": "registry:ui"
    }
  ]
}